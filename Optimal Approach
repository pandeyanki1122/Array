https://leetcode.com/problems/sort-colors/discuss/1209316/on-1-pass-in-place-solution-with-explanation-using-dutch-national-flag-algorithm

Place three pointers i.e. lo = 0 ( at the 0th index) , mid = 0 ( also at the 0th index) and high = arr.size( )-1,(i.e at last index), now, start traversing given array . We will be moving mid pointer until mid pointer crosses the high pointer.
while moving we will be have three checks.

1) When mid pointing to '0' -> swap( arr[lo ++] , arr[mid ++] );
2) When mid pointing to '1' -> mid++;
3) When mid pointing to '2' -> swap( arr[mid] , arr[high--] );
CODE :- 
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int lo = 0;
        int mid = 0;
        int high = nums.size()-1;
        
        while(mid <= high)
        {
            switch(nums[mid])
            {
                case 0:
                    swap(nums[lo++] , nums[mid++]);
                    break;
                    
                case 1: 
                    mid++;
                    break;
                    
                case 2:
                    swap(nums[mid] , nums[high--]);
                    break;
            }
            
        } 
        
    }
};

Time Complexity = O(N)
Space Complexity = O(1).
